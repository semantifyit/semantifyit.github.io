{"version":3,"sources":["rmlmapper.ts","App.tsx","../node_modules/colors/lib sync","serviceWorker.ts","index.tsx"],"names":["yarrrmlParse","yaml","Promise","resolve","yamlQuads","yarrrml","convert","writer","N3","Writer","rr","rdf","rdfs","fnml","fno","addQuads","end","_","result","parseFile","_ref","Object","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","mappingFile","inputFile","options","inputType","wrap","_context","prev","next","abrupt","rmlMapperNode","parseFileLive","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","concat","stop","_x","_x2","_x3","_x4","apply","this","arguments","yarrrmlExtend","replace","initialMapping","initialInput","initialFunctions","App","_useState","useState","_useState2","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","mapping","setMapping","_useState3","_useState4","input","setInput","_useState5","_useState6","functions","setFunctions","_useState7","_useState8","output","setOutput","_useState9","_useState10","setInputType","_useState11","_useState12","outputType","setOutputType","_useState13","_useState14","rmlType","setRmlType","_useState15","_useState16","runOnChange","setRunOnChange","_useState17","_useState18","showFunctions","setShowFunctions","runMapping","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","mapping_ttl","_callee$","sent","console","log","toRDF","toString","eval","JSON","stringify","t0","click","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","onClick","react_ace__WEBPACK_IMPORTED_MODULE_4___default","fontSize","mode","theme","value","onChange","e","name","editorProps","$blockScrolling","showPrintMargin","width","style","gridColumn","readOnly","target","type","checked","webpackEmptyContext","req","Error","code","keys","module","exports","id","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c89e020.chunk.js","sourcesContent":["import N3 from 'n3';\nimport yarrrml from '@rmlio/yarrrml-parser/lib/yarrrml2rml';\nimport rmlMapperNode from 'rml-mapper-nodejs';\n\n\nexport const yarrrmlParse = (yaml: string): Promise<string> => \n    new Promise((resolve) => {\n        const y2r = new yarrrml();\n        const yamlQuads = y2r.convert(yaml);\n        const writer = N3.Writer({\n            rr: 'http://www.w3.org/ns/r2rml#',\n            rdf:'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n            fnml: \"http://semweb.mmlab.be/ns/fnml#\",\n            fno: \"http://w3id.org/function/ontology#\"\n        });\n        writer.addQuads(yamlQuads);\n        writer.end((_: any, result: any) => {\n            resolve(result);\n        });\n    });\n\n\nexport const parseFile = async (mappingFile: string, inputFile: string, options:any, inputType:string) => {\n    return rmlMapperNode.parseFileLive(mappingFile, {[`input.${inputType}`]: inputFile}, options);\n}\n\n\n//  - [ex:name, {mapping: thumbnail, join: [asd, asd]}]\n// -->\n//  - [ex:name,  {mapping:geo, condition:{function:equal,parameters:[[str1,$(firstname)],[str2,$(firstname)]]}}]\n\n\nexport const yarrrmlExtend = (yarrrml: string): string => \n    yarrrml.replace(/join: *\\[ *([\\w@\\^\\.\\/]+) *, *([\\w@\\^\\.\\/]+) *\\]/g, 'condition:{function:equal,parameters:[[str1,$($1)],[str2,$($2)]]}');","import React, { useState } from 'react';\nimport brace from 'brace';\nimport AceEditor from 'react-ace';\n\nimport 'brace/ext/searchbox';\nimport 'brace/mode/yaml';\nimport 'brace/mode/turtle';\nimport 'brace/mode/xml';\nimport 'brace/mode/json';\nimport 'brace/mode/javascript';\n\nimport 'brace/theme/dracula';\n\nimport './App.css';\n\nimport { parseFile, yarrrmlParse, yarrrmlExtend } from './rmlmapper';\n\nconst initialMapping = `prefixes:\n  schema: \"http://schema.org/\"\nmappings:\n  person:\n    sources:\n      - ['input.json~jsonpath', '$.persons[*]']\n    s: http://example.com/$(firstname)\n    po:\n      - [a, schema:Person]\n      - [schema:name, $(firstname)]\n      - [schema:language, $(speaks.*)]`;\nconst initialInput = `{\n  \"persons\": [\n      {\n          \"firstname\": \"John\",\n          \"lastname\": \"Doe\",\n          \"speaks\": [\n              \"de\",\n              \"en\"\n          ]\n      },\n      {\n          \"firstname\": \"Jane\",\n          \"lastname\": \"Smith\",\n          \"speaks\": [\n              \"fr\",\n              \"es\"\n          ]\n      }\n  ]\n}`;\nconst initialFunctions = \n`(() => {\n  // define your function namespace here:\n  const namespace = 'http://myfunc.com/';\n  \n  // your functions: (input is an array)\n  const toUpperCase = ([str]) => {\n    return str.toString().toUpperCase();\n  };\n  \n\n  // array of all functions you want to export\n  const functionToExport = [toUpperCase];\n\n  return functionToExport.reduce((acc, cur) => {acc[namespace + cur.name] = cur; return acc;}, {});\n})();\n`;\n\nconst App = () => {\n  const [mapping, setMapping] = useState(initialMapping);\n  const [input, setInput] = useState(initialInput);\n  const [functions, setFunctions] = useState(initialFunctions);\n  const [output, setOutput] = useState('');\n  const [inputType, setInputType] = useState('json');\n  const [outputType, setOutputType] = useState('json');\n  const [rmlType, setRmlType] = useState('yaml');\n  const [runOnChange, setRunOnChange] = useState(true);\n  const [showFunctions, setShowFunctions] = useState(false);\n\n  const runMapping = async () => {\n    try {\n      let mapping_ttl = mapping;\n\n      if (rmlType === 'yaml') {\n        mapping_ttl = yarrrmlExtend(mapping_ttl);\n        mapping_ttl = await yarrrmlParse(mapping_ttl);\n        console.log(mapping_ttl);\n        \n      }\n      const result = await parseFile(mapping_ttl,\n        input,\n        {\n          toRDF: (outputType==='turtle').toString(),\n          //replace:'true',\n          //compress: { \n          //  '@vocab':\"http://schema.org/\"\n          //},\n          functions: eval(functions),\n        },\n        inputType);\n      setOutput(outputType==='turtle' ? result : JSON.stringify(result, null, 2));\n    } catch (e) {\n      console.log(e);\n      setOutput(e.toString());\n    }\n  }\n\n  if(runOnChange){\n    runMapping();\n  }\n\n  const click = () =>\n    runMapping();\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to RMHell!!</h1>\n\n          <button className=\"button\" onClick={click}>RUN</button>\n\n          <div className=\"grid\">\n            <div className=\"width-auto\">\n            <h3>Yarrml / RML-ttl</h3>\n              <AceEditor\n                fontSize={14}\n                mode={rmlType}\n                theme=\"dracula\"\n                value={mapping}\n                onChange={(e) => setMapping(e)}\n                name=\"yarrrml\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n                width=\"auto\"\n              />\n            </div>\n            {showFunctions && (\n              <div className=\"width-auto\">\n              <h3>JS Functions</h3>\n                <AceEditor\n                  fontSize={14}\n                  mode=\"javascript\"\n                  theme=\"dracula\"\n                  value={functions}\n                  onChange={(e) => setFunctions(e)}\n                  name=\"functions\"\n                  editorProps={{$blockScrolling: true}}\n                  showPrintMargin={false}\n                  width=\"auto\"\n                />\n              </div>\n            )}\n            <div className=\"width-auto\">\n              <h3>Input{`.${inputType}`}</h3>\n              <AceEditor\n                fontSize={14}\n                mode={inputType}\n                theme=\"dracula\"\n                value={input}\n                onChange={(e) => setInput(e)}\n                name=\"input\"\n                width=\"auto\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={!showFunctions ? {gridColumn: \"1 / 3\"}: {}}>\n              <h3>Output</h3>\n              <AceEditor\n                fontSize={14}\n                mode={outputType}\n                theme=\"dracula\"\n                value={output}\n                name=\"output\"\n                editorProps={{$blockScrolling: true}}\n                width=\"auto\"\n                readOnly={true}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={{gridColumn: \"1 / 3\"}}>\n              <h3>Settings</h3>\n              <span className=\"marginRight\">\n                RML type:\n                <select value={rmlType} onChange={(e) => setRmlType(e.target.value)}>\n                  <option value=\"yaml\">Yarrrml</option>\n                  <option value=\"turtle\">RML-turtle</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Input type:\n                <select value={inputType} onChange={(e) => setInputType(e.target.value)}>\n                  <option value=\"json\">JSON</option>\n                  <option value=\"xml\">XML</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Output type:\n                <select value={outputType} onChange={(e) => setOutputType(e.target.value)}>\n                  <option value=\"json\">JSON-LD</option>\n                  <option value=\"turtle\">N-Tripples</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                <input type=\"checkbox\" name=\"runMapperOnChange\" checked={showFunctions} onChange={(e) => setShowFunctions(!showFunctions)}/> Show functions\n              </span>\n              <input type=\"checkbox\" name=\"runMapperOnChange\" checked={runOnChange} onChange={(e) => setRunOnChange(!runOnChange)}/> Run mapper on change\n            </div>\n          </div>\n          <div className=\"footer\"/>\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 435;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
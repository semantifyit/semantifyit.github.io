{"version":3,"sources":["../node_modules/colors/lib sync","rmlmapper.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","yarrrmlParse","yaml","Promise","yamlQuads","yarrrml","convert","writer","N3","Writer","rr","rdf","rdfs","fnml","fno","addQuads","end","_","result","parseFile","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","mappingFile","inputFile","options","inputType","wrap","_context","prev","next","abrupt","rmlMapperNode","parseFileLive","defineProperty","concat","stop","_x","_x2","_x3","_x4","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","mapping","setMapping","_useState3","_useState4","input","setInput","_useState5","_useState6","output","setOutput","_useState7","_useState8","setInputType","_useState9","_useState10","outputType","setOutputType","_useState11","_useState12","rmlType","setRmlType","_useState13","_useState14","runOnChange","setRunOnChange","runMapping","mapping_ttl","sent","toRDF","toString","JSON","stringify","t0","react_default","createElement","className","onClick","lib_default","fontSize","mode","theme","value","onChange","name","editorProps","$blockScrolling","style","gridColumn","width","readOnly","target","type","checked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0eb9584.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 430;","import N3 from 'n3';\nimport yarrrml from '@rmlio/yarrrml-parser/lib/yarrrml2rml';\nimport rmlMapperNode from 'rml-mapper-nodejs';\n\n\nexport const yarrrmlParse = (yaml: string): Promise<string> => \n    new Promise((resolve) => {\n        const y2r = new yarrrml();\n        const yamlQuads = y2r.convert(yaml);\n        const writer = N3.Writer({\n            rr: 'http://www.w3.org/ns/r2rml#',\n            rdf:'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n            fnml: \"http://semweb.mmlab.be/ns/fnml#\",\n            fno: \"http://w3id.org/function/ontology#\"\n        });\n        writer.addQuads(yamlQuads);\n        writer.end((_: any, result: any) => {\n            resolve(result);\n        });\n    });\n\n\nexport const parseFile = async (mappingFile: string, inputFile: string, options:any, inputType:string) => {\n    return rmlMapperNode.parseFileLive(mappingFile, {[`input.${inputType}`]: inputFile}, options);\n}","import React, { Component, useState } from 'react';\nimport './App.css';\nimport brace from 'brace';\nimport AceEditor from 'react-ace';\n\nimport 'brace/mode/yaml';\nimport 'brace/mode/turtle';\nimport 'brace/mode/xml';\nimport 'brace/mode/json';\n\nimport 'brace/theme/solarized_dark';\n\nimport { parseFile, yarrrmlParse } from './rmlmapper';\n\nconst initialMapping = `prefixes:\n  schema: \"http://schema.org/\"\nmappings:\n  person:\n    sources:\n      - ['input.json~jsonpath', '$.persons[*]']\n    s: http://example.com/$(firstname)\n    po:\n      - [a, schema:Person]\n      - [schema:name, $(firstname)]\n      - [schema:language, $(speaks.*)]`;\nconst initialInput = `{\n  \"persons\": [\n      {\n          \"firstname\": \"John\",\n          \"lastname\": \"Doe\",\n          \"speaks\": [\n              \"de\",\n              \"en\"\n          ]\n      },\n      {\n          \"firstname\": \"Jane\",\n          \"lastname\": \"Smith\",\n          \"speaks\": [\n              \"fr\",\n              \"es\"\n          ]\n      }\n  ]\n}`;\n\nconst App = () => {\n  const [mapping, setMapping] = useState(initialMapping);\n  const [input, setInput] = useState(initialInput);\n  const [output, setOutput] = useState('');\n  const [inputType, setInputType] = useState('json');\n  const [outputType, setOutputType] = useState('json');\n  const [rmlType, setRmlType] = useState('yaml');\n  const [runOnChange, setRunOnChange] = useState(true);\n\n  const runMapping = async () => {\n    try {\n      let mapping_ttl = mapping;\n      if (rmlType === 'yaml') {\n        mapping_ttl = await yarrrmlParse(mapping_ttl);\n      }\n      const result = await parseFile(mapping_ttl, input, {toRDF: (outputType==='turtle').toString()}, inputType);\n      setOutput(outputType==='turtle' ? result : JSON.stringify(result, null, 2));\n    } catch (e) {\n      setOutput(e.toString());\n    }\n  }\n\n  if(runOnChange){\n    runMapping();\n  }\n\n  const click = () =>\n    runMapping()\n  \n  \n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to RMHell!!</h1>\n\n          <button className=\"button\" onClick={click}>RUN</button>\n\n          <div className=\"grid\">\n            <div className=\"width-auto\">\n            <h3>Yarrml / RML-ttl</h3>\n              <AceEditor\n                fontSize={14}\n                mode={rmlType}\n                theme=\"solarized_dark\"\n                value={mapping}\n                onChange={(e) => setMapping(e)}\n                name=\"yarrrml\"\n                editorProps={{$blockScrolling: true}}\n              />\n            </div>\n            <div className=\"width-auto\">\n              <h3>Input{`.${inputType}`}</h3>\n              <AceEditor\n                fontSize={14}\n                mode={inputType}\n                theme=\"solarized_dark\"\n                value={input}\n                onChange={(e) => setInput(e)}\n                name=\"input\"\n                editorProps={{$blockScrolling: true}}\n              />\n            </div>\n            <div className=\"width-auto\" style={{gridColumn: \"1 / 3\"}}>\n              <h3>Output</h3>\n              <AceEditor\n                fontSize={14}\n                mode={outputType}\n                theme=\"solarized_dark\"\n                value={output}\n                name=\"output\"\n                editorProps={{$blockScrolling: true}}\n                width=\"auto\"\n                readOnly={true}\n              />\n            </div>\n            <div className=\"width-auto\" style={{gridColumn: \"1 / 3\"}}>\n              <h3>Settings</h3>\n              <span className=\"marginRight\">\n                RML type:\n                <select value={rmlType} onChange={(e) => setRmlType(e.target.value)}>\n                  <option value=\"yaml\">Yarrrml</option>\n                  <option value=\"turtle\">RML-turtle</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Input type:\n                <select value={inputType} onChange={(e) => setInputType(e.target.value)}>\n                  <option value=\"json\">JSON</option>\n                  <option value=\"xml\">XML</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Output type:\n                <select value={outputType} onChange={(e) => setOutputType(e.target.value)}>\n                  <option value=\"json\">JSON-LD</option>\n                  <option value=\"turtle\">N-Tripples</option>\n                </select>\n              </span>\n              <input type=\"checkbox\" name=\"runMapperOnChange\" checked={runOnChange} onChange={(e) => setRunOnChange(!runOnChange)}/> Run mapper on change\n            </div>\n          </div>\n          <div className=\"footer\"/>\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
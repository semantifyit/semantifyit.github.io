{"version":3,"sources":["App.tsx","util.ts","serviceWorker.ts","index.tsx","rmlmapper.ts"],"names":["initialMapping","initialInput","initialFunctions","window","onbeforeunload","App","_useState","useState","_useState2","Object","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","mapping","setMapping","_useState3","_useState4","input","setInput","_useState5","_useState6","functions","setFunctions","_useState7","_useState8","output","setOutput","_useState9","_useState10","inputType","setInputType","_useState11","_useState12","outputType","setOutputType","_useState13","_useState14","rmlType","setRmlType","_useState15","_useState16","runOnChange","setRunOnChange","_useState17","_useState18","showFunctions","setShowFunctions","downloadRmlStr","runMapping","_ref","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","mappingStr","extYml","result","wrap","_callee$","_context","prev","next","yarrrmlExtend","yarrrmlParse","sent","decodeRMLReplacements","parseFile","toRDF","removeNameSpace","xmlns","replace","compress","@vocab","eval","JSON","stringify","t0","console","log","toString","stop","apply","this","arguments","saveRML","downloadString","click","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","onClick","react_ace__WEBPACK_IMPORTED_MODULE_4___default","fontSize","mode","theme","value","onChange","e","name","editorProps","$blockScrolling","showPrintMargin","width","concat","style","gridColumn","readOnly","target","type","checked","__webpack_require__","d","__webpack_exports__","text","fileType","fileName","blob","Blob","document","download","href","URL","createObjectURL","dataset","downloadurl","join","display","body","appendChild","removeChild","setTimeout","revokeObjectURL","Boolean","location","hostname","match","ReactDOM","render","react_default","getElementById","navigator","serviceWorker","ready","then","registration","unregister","yaml","Promise","resolve","y2r","yarrrml","yamlQuads","convert","prefixes","rr","rml","xsd","schema","rdf","rdfs","fnml","fno","mex","assign","getPrefixes","writer","N3","Writer","addQuads","end","_","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mappingFile","inputFile","options","abrupt","rmlMapperNode","parseFileLive","_x","_x2","_x3","_x4","str","_len","length","Array","_key","_ref2","_ref3","_home_thiger_Projects_yarrrml_editor_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","cg1","cg2","cg3","split","map","i","trim","escapeTable","(",")","{","}","entries","reduce","_ref4","_ref5","char","code","RegExp"],"mappings":"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","file":"static/js/main.1ce76d69.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport brace from 'brace';\nimport AceEditor from 'react-ace';\n\nimport 'brace/ext/searchbox';\nimport 'brace/mode/yaml';\nimport 'brace/mode/turtle';\nimport 'brace/mode/xml';\nimport 'brace/mode/json';\nimport 'brace/mode/javascript';\n\nimport 'brace/theme/dracula';\n\nimport './App.css';\n\nimport { parseFile, yarrrmlParse, yarrrmlExtend, decodeRMLReplacements } from './rmlmapper';\nimport { downloadString } from './util';\n\nconst initialMapping = `prefixes:\n  schema: \"http://schema.org/\"\n  myfunc: \"http://myfunc.com/\"\nmappings:\n  person:\n    sources:\n      - ['input~jsonpath', '$.persons[*]']\n    s: http://example.com/$(firstname)\n    po:\n      - [a, schema:Person]\n      - [schema:name, $(firstname)]\n      - [schema:language, $(speaks.*)]\n`;\n\nconst initialInput = `{\n  \"persons\": [\n      {\n          \"firstname\": \"John\",\n          \"lastname\": \"Doe\",\n          \"speaks\": [\n              \"de\",\n              \"en\"\n          ]\n      },\n      {\n          \"firstname\": \"Jane\",\n          \"lastname\": \"Smith\",\n          \"speaks\": [\n              \"fr\",\n              \"es\"\n          ]\n      }\n  ]\n}`;\nconst initialFunctions = \n`(() => {\n  // define your function namespace here:\n  const namespace = 'http://myfunc.com/';\n  \n  // your functions: (input is an array)\n  const toUpperCase = ([str]) => {\n    return str.toString().toUpperCase();\n  };\n  \n\n  // array of all functions you want to export\n  const functionToExport = [toUpperCase];\n\n  return functionToExport.reduce((acc, cur) => {acc[namespace + cur.name] = cur; return acc;}, {});\n})();\n`;\n\nwindow.onbeforeunload = function() {\n  return true;\n};\n\nconst App = () => {\n  const [mapping, setMapping] = useState(initialMapping);\n  const [input, setInput] = useState(initialInput);\n  const [functions, setFunctions] = useState(initialFunctions);\n  const [output, setOutput] = useState('');\n  const [inputType, setInputType] = useState('json');\n  const [outputType, setOutputType] = useState('json');\n  const [rmlType, setRmlType] = useState('yaml');\n  const [runOnChange, setRunOnChange] = useState(false);\n  const [showFunctions, setShowFunctions] = useState(false);\n\n  let downloadRmlStr = '';\n\n  const runMapping = async () => {\n    try {\n      let mappingStr = mapping;\n\n      if (rmlType === 'yaml') {\n        const extYml = yarrrmlExtend(mappingStr);\n        //console.log(mapping_ttl);\n        mappingStr = await yarrrmlParse(extYml);\n        //console.log(mapping_ttl);\n        // replace Brackets\n        mappingStr = decodeRMLReplacements(mappingStr);\n\n      }\n      downloadRmlStr = mappingStr;\n      const result = await parseFile(mappingStr,\n        input,\n        {\n          toRDF: (outputType==='turtle'),\n          removeNameSpace:{xmlns:\"http://interface.deskline.net/DSI/XSD\"},\n          replace: true,\n          compress: { \n           '@vocab':\"http://schema.org/\"\n          },\n          functions: eval(functions),\n        },\n        inputType);        \n      setOutput(outputType==='turtle' ? result : JSON.stringify(result, null, 2));\n    } catch (e) {\n      console.log(e);\n      setOutput(e.toString());\n    }\n  }\n\n  const saveRML = () => {\n    downloadString(downloadRmlStr, 'ttl', 'mapping_rml.ttl');\n  }\n\n  if(runOnChange){\n    runMapping();\n  }\n\n  const click = () =>\n    runMapping();\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to RMHell!!</h1>\n\n          <button className=\"button\" onClick={click}>RUN</button>\n\n          <div className=\"grid\">\n            <div className=\"width-auto\">\n            <h3>Yarrml / RML-ttl</h3>\n              <AceEditor\n                fontSize={14}\n                mode={rmlType}\n                theme=\"dracula\"\n                value={mapping}\n                onChange={(e) => setMapping(e)}\n                name=\"yarrrml\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n                width=\"auto\"\n              />\n            </div>\n            {showFunctions && (\n              <div className=\"width-auto\">\n              <h3>JS Functions</h3>\n                <AceEditor\n                  fontSize={14}\n                  mode=\"javascript\"\n                  theme=\"dracula\"\n                  value={functions}\n                  onChange={(e) => setFunctions(e)}\n                  name=\"functions\"\n                  editorProps={{$blockScrolling: true}}\n                  showPrintMargin={false}\n                  width=\"auto\"\n                />\n              </div>\n            )}\n            <div className=\"width-auto\">\n              <h3>Input({`.${inputType}`})</h3>\n              <AceEditor\n                fontSize={14}\n                mode={inputType}\n                theme=\"dracula\"\n                value={input}\n                onChange={(e) => setInput(e)}\n                name=\"input\"\n                width=\"auto\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={!showFunctions ? {gridColumn: \"1 / 3\"}: {}}>\n              <h3>Output</h3>\n              <AceEditor\n                fontSize={14}\n                mode={outputType}\n                theme=\"dracula\"\n                value={output}\n                name=\"output\"\n                editorProps={{$blockScrolling: true}}\n                width=\"auto\"\n                readOnly={true}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={{gridColumn: \"1 / 3\"}}>\n              <h3>Settings</h3>\n              <span className=\"marginRight\">\n                RML type:\n                <select value={rmlType} onChange={(e) => setRmlType(e.target.value)}>\n                  <option value=\"yaml\">Yarrrml</option>\n                  <option value=\"turtle\">RML-turtle</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Input type:\n                <select value={inputType} onChange={(e) => setInputType(e.target.value)}>\n                  <option value=\"json\">JSON</option>\n                  <option value=\"xml\">XML</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Output type:\n                <select value={outputType} onChange={(e) => setOutputType(e.target.value)}>\n                  <option value=\"json\">JSON-LD</option>\n                  <option value=\"turtle\">N-Tripples</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                <input type=\"checkbox\" name=\"runMapperOnChange\" checked={showFunctions} onChange={(e) => setShowFunctions(!showFunctions)}/> Show functions\n              </span>\n              <input type=\"checkbox\" name=\"runMapperOnChange\" checked={runOnChange} onChange={(e) => setRunOnChange(!runOnChange)}/> Run mapper on change\n              <br/>\n              <button className=\"button small\" onClick={saveRML}>Download RML</button>\n            </div>\n          </div>\n          <div className=\"footer\"/>\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","\nexport const downloadString = (text: string, fileType: string, fileName: string) => {\n    const blob = new Blob([text], { type: fileType });\n  \n    const a = document.createElement('a');\n    a.download = fileName;\n    a.href = URL.createObjectURL(blob);\n    a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import N3 from 'n3';\nimport yarrrml from '@rmlio/yarrrml-parser/lib/yarrrml2rml';\nimport rmlMapperNode from 'rml-mapper-nodejs';\n\n\nexport const yarrrmlParse = (yaml: string): Promise<string> => \n    new Promise((resolve) => {\n        const y2r = new yarrrml();\n        const yamlQuads = y2r.convert(yaml);\n        let prefixes = {\n            rr: 'http://www.w3.org/ns/r2rml#',\n            rml: 'http://semweb.mmlab.be/ns/rml#',\n            xsd: 'http://www.w3.org/2001/XMLSchema#',\n            schema: 'http://schema.org/',\n            rdf:'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n            fnml: \"http://semweb.mmlab.be/ns/fnml#\",\n            fno: \"http://w3id.org/function/ontology#\",\n            mex: \"http://mapping.example.com/\"\n        };\n        prefixes = Object.assign({}, prefixes, y2r.getPrefixes());\n\n        const writer = new N3.Writer({prefixes});\n        writer.addQuads(yamlQuads);\n        writer.end((_: any, result: any) => {\n            resolve(result);\n        });\n    });\n\n\nexport const parseFile = async (mappingFile: string, inputFile: string, options:any, inputType:string) => {\n    return rmlMapperNode.parseFileLive(mappingFile, {'input': inputFile}, options);\n}\n\n\n//  - [ex:name, {mapping: thumbnail, join: [asd, asd]}]\n// -->\n//  - [ex:name,  {mapping:geo, condition:{function:equal,parameters:[[str1,$(firstname)],[str2,$(firstname)]]}}]\n\n\n// - [schema:geo, {function: myfunc:toUpperCase, parameters: [$(title), $(foo)]}]\n// -->\n// - [schema:geo, {function: myfunc:toUpperCase, parameters: [[ex:str1, $(title)], [ex:str2, $(foo)]]}]\n\n\nexport const yarrrmlExtend = (yarrrml: string): string => {\n    // replace function    \n    let str = yarrrml.replace(/((?:parameters|pms): *\\[)([\\w@\\^\\.\\/\\$\\(\\)\\\"\\' ,\\[\\]]+)(\\])/g,\n    (...e) => {\n        const [, cg1, cg2, cg3] = e as [string,string,string,string];\n        const params = cg2.split(',').map((e, i) => `[schema:str${i}, ${e.trim()}]`).join(', ')\n        return cg1 + params + cg3;\n    });\n    // replace join    \n    str = str.replace(/join: *\\[ *\"?([\\w@\\^\\.\\/\\$\\:\\-\\*\\,\\ ]+)\"? *, *\"?([\\w@\\^\\.\\/\\$\\:\\-\\*\\,\\ ]+)\"? *\\]/g, 'condition:{function:equal,parameters:[[str1,\"$($1)\"],[str2,\"$($2)\"]]}');\n    return str;\n}\n\n// name$LBR.$RBR -> name(.)\nconst escapeTable = {\n    \"(\": \"\\\\$LBR\",\n    \")\": \"\\\\$RBR\",\n    \"{\": \"\\\\$LCB\",\n    \"}\": \"\\\\$RCB\",\n}\n\nexport const decodeRMLReplacements = (rml: string) => \n    Object.entries(escapeTable).reduce((str, [char, code]) => str.replace(new RegExp(code, 'g'), char), rml);\n"],"sourceRoot":""}
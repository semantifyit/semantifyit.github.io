{"version":3,"sources":["rmlmapper.ts","App.tsx","util.ts","serviceWorker.ts","index.tsx"],"names":["yarrrmlParse","yaml","Promise","resolve","y2r","yarrrmlParser","yamlQuads","convert","prefixes","rr","rml","xsd","schema","rdf","rdfs","fnml","fno","mex","Object","assign","getPrefixes","writer","N3","addQuads","end","_","result","runRmlMapping","mappingFile","inputFile","options","a","async","rmlMapperNode","input","yarrrmlExtend","yarrrml","str","replace","e","cg1","cg2","cg3","params","split","map","el","i","trim","join","escapeTable","yarrrmlEncodeBrackets","level","ret","length","c","Error","yarrrmlPlusToRml","mappingStr","entries","reduce","char","code","RegExp","initialMapping","initialInput","initialFunctions","App","useState","mapping","setMapping","setInput","functions","setFunctions","output","setOutput","inputType","setInputType","outputType","setOutputType","rmlType","setRmlType","runOnChange","setRunOnChange","showFunctions","setShowFunctions","downloadRmlStr","runMapping","console","log","toRDF","removeNameSpace","xmlns","compress","eval","JSON","stringify","toString","saveRML","downloadString","click","className","onClick","fontSize","mode","theme","value","onChange","name","editorProps","$blockScrolling","showPrintMargin","width","style","gridColumn","readOnly","target","type","checked","text","fileType","fileName","blob","Blob","document","createElement","download","href","URL","createObjectURL","dataset","downloadurl","display","body","appendChild","removeChild","setTimeout","revokeObjectURL","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d55be00d.chunk.js","sourcesContent":["import * as N3 from 'n3';\nimport * as yarrrmlParser from '@rmlio/yarrrml-parser/lib/rml-generator';\nimport * as rmlMapperNode from 'rocketrml';\n\nexport const yarrrmlParse = (yaml: string): Promise<string> =>\n  new Promise((resolve) => {\n    const y2r = new yarrrmlParser();\n    const yamlQuads = y2r.convert(yaml);\n    let prefixes = {\n      rr: 'http://www.w3.org/ns/r2rml#',\n      rml: 'http://semweb.mmlab.be/ns/rml#',\n      xsd: 'http://www.w3.org/2001/XMLSchema#',\n      schema: 'http://schema.org/',\n      rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n      rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n      fnml: 'http://semweb.mmlab.be/ns/fnml#',\n      fno: 'http://w3id.org/function/ontology#',\n      mex: 'http://mapping.example.com/',\n    };\n    prefixes = Object.assign({}, prefixes, y2r.getPrefixes());\n\n    const writer = new N3.Writer({ prefixes });\n    writer.addQuads(yamlQuads);\n    writer.end((_: any, result: any) => {\n      resolve(result);\n    });\n  });\n\nexport const runRmlMapping = async (\n  mappingFile: string,\n  inputFile: string,\n  options: any,\n) => {\n  return rmlMapperNode.parseFileLive(\n    mappingFile,\n    { input: inputFile },\n    options,\n  );\n};\n\n//  - [ex:name, {mapping: thumbnail, join: [asd, asd]}]\n// -->\n//  - [ex:name,  {mapping:geo, condition:{function:equal,parameters:[[str1,$(firstname)],[str2,$(firstname)]]}}]\n\n// - [schema:geo, {function: myfunc:toUpperCase, parameters: [$(title), $(foo)]}]\n// -->\n// - [schema:geo, {function: myfunc:toUpperCase, parameters: [[ex:str1, $(title)], [ex:str2, $(foo)]]}]\n\nexport const yarrrmlExtend = (yarrrml: string): string => {\n  // replace function\n  let str = yarrrml.replace(\n    /((?:parameters|pms): *\\[)([\\w@\\^\\.\\/\\$\\(\\)\\\"\\' ,\\[\\]\\|\\=]+)(\\])/g,\n    (...e) => {\n      const [, cg1, cg2, cg3] = e as [string, string, string, string];\n      const params = cg2\n        .split(',')\n        .map((el, i) => `[schema:str${i}, ${el.trim()}]`)\n        .join(', ');\n      return cg1 + params + cg3;\n    },\n  );\n  // replace join\n  str = str.replace(\n    /join: *\\[ *\"?([\\w@\\^\\.\\/\\$\\:\\-\\*\\,\\ \\'\\)\\()]+)\"? *, *\"?([\\w@\\^\\.\\/\\$\\:\\-\\*\\,\\ \\'\\(\\)]+)\"? *\\]/g,\n    'condition:{function:equal,parameters:[[str1,\"$($1)\"],[str2,\"$($2)\"]]}',\n  );\n  return str;\n};\n\n// name$LBR.$RBR -> name(.)\nconst escapeTable = {\n  '(': '\\\\$LBR',\n  ')': '\\\\$RBR',\n  '{': '\\\\$LCB',\n  '}': '\\\\$RCB',\n};\n\nconst yarrrmlEncodeBrackets = (str: string) => {\n  let level = 0;\n  let ret = '';\n\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str[i];\n\n    if (level < 0) {\n      throw new Error('failed parsing brackets');\n    }\n\n    if (level === 0) {\n      switch (c) {\n        case '$':\n          if (str[i + 1] === '(') {\n            level += 1;\n            i += 1;\n            ret += '$(';\n          } else {\n            ret += c;\n          }\n          break;\n        case '(':\n        case ')':\n        default:\n          ret += c;\n      }\n    } else {\n      switch (c) {\n        case '(':\n          level += 1;\n          ret += '$LBR';\n          break;\n        case ')':\n          level -= 1;\n          if (level === 0) {\n            ret += ')';\n          } else {\n            ret += '$RBR';\n          }\n          break;\n        default:\n          ret += c;\n      }\n    }\n  }\n  return ret;\n};\n\n// console.log(yarrrmlEncodeBrackets('asd$(fii) fds $(fs(name(), conc(foo, my, \"fellow\"))g) why'));\n\nexport const decodeRMLReplacements = (rml: string) =>\n  Object.entries(escapeTable).reduce(\n    (str, [char, code]) => str.replace(new RegExp(code, 'g'), char),\n    rml,\n  );\n\nexport const yarrrmlPlusToRml = async (yarrrml: string): Promise<string> => {\n  let mappingStr = yarrrmlExtend(yarrrml);\n  mappingStr = yarrrmlEncodeBrackets(mappingStr);\n  mappingStr = await yarrrmlParse(mappingStr);\n  mappingStr = decodeRMLReplacements(mappingStr);\n  return mappingStr;\n};\n","import React, { useState } from 'react';\nimport brace from 'brace';\nimport AceEditor from 'react-ace';\n\nimport 'brace/ext/searchbox';\nimport 'brace/mode/yaml';\nimport 'brace/mode/turtle';\nimport 'brace/mode/xml';\nimport 'brace/mode/json';\nimport 'brace/mode/javascript';\n\n\nimport 'brace/theme/dracula';\n\nimport './App.css';\n\nimport { runRmlMapping, yarrrmlPlusToRml } from './rmlmapper';\nimport { downloadString } from './util';\n\nconst initialMapping = `prefixes:\n  schema: \"http://schema.org/\"\n  myfunc: \"http://myfunc.com/\"\nmappings:\n  person:\n    sources:\n      - ['input~jsonpath', '$.persons[*]']\n    s: http://example.com/$(firstname)\n    po:\n      - [a, schema:Person]\n      - [schema:name, $(firstname)]\n      - [schema:language, $(speaks.*)]\n`;\n\nconst initialInput = `{\n  \"persons\": [\n      {\n          \"firstname\": \"John\",\n          \"lastname\": \"Doe\",\n          \"speaks\": [\n              \"de\",\n              \"en\"\n          ]\n      },\n      {\n          \"firstname\": \"Jane\",\n          \"lastname\": \"Smith\",\n          \"speaks\": [\n              \"fr\",\n              \"es\"\n          ]\n      }\n  ]\n}`;\nconst initialFunctions = \n`(() => {\n  // define your function namespace here:\n  const namespace = 'http://myfunc.com/';\n  \n  // your functions: (input is an array)\n  const toUpperCase = ([str]) => {\n    return str.toString().toUpperCase();\n  };\n  \n\n  // array of all functions you want to export\n  const functionToExport = [toUpperCase];\n\n  return functionToExport.reduce((acc, cur) => {acc[namespace + cur.name] = cur; return acc;}, {});\n})();\n`;\n\n// window.onbeforeunload = function() {\n//   return true;\n// };\n\n\n\nconst App = () => {\n  const [mapping, setMapping] = useState(initialMapping);\n  const [input, setInput] = useState(initialInput);\n  const [functions, setFunctions] = useState(initialFunctions);\n  const [output, setOutput] = useState('');\n  const [inputType, setInputType] = useState('json');\n  const [outputType, setOutputType] = useState('json');\n  const [rmlType, setRmlType] = useState('yaml');\n  const [runOnChange, setRunOnChange] = useState(false);\n  const [showFunctions, setShowFunctions] = useState(false);\n\n  let downloadRmlStr = '';\n\n  const runMapping = async () => {\n    try {\n      let mappingStr = mapping;\n\n      if (rmlType === 'yaml') {\n        mappingStr = await yarrrmlPlusToRml(mappingStr);\n        console.log(mappingStr);\n      }\n      downloadRmlStr = mappingStr;\n      const result = await runRmlMapping(mappingStr,\n        input,\n        {\n          toRDF: (outputType==='turtle'),\n          removeNameSpace:{xmlns:\"http://interface.deskline.net/DSI/XSD\"},\n          replace: true,\n          compress: { \n           '@vocab':\"http://schema.org/\"\n          },\n          functions: eval(functions),\n        });        \n      setOutput(outputType==='turtle' ? result : JSON.stringify(result, null, 2));\n    } catch (e) {\n      console.log(e);\n      setOutput(e.toString());\n    }\n  }\n\n  const saveRML = () => {\n    downloadString(downloadRmlStr, 'ttl', 'mapping_rml.ttl');\n  }\n\n  if(runOnChange){\n    runMapping();\n  }\n\n  const click = () =>\n    runMapping();\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to RMHell!!</h1>\n\n          <button className=\"button\" onClick={click}>RUN</button>\n\n          <div className=\"grid\">\n            <div className=\"width-auto\">\n            <h3>Yarrml / RML-ttl</h3>\n              <AceEditor\n                fontSize={14}\n                mode={rmlType}\n                theme=\"dracula\"\n                value={mapping}\n                onChange={(e) => setMapping(e)}\n                name=\"yarrrml\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n                width=\"auto\"\n              />\n            </div>\n            {showFunctions && (\n              <div className=\"width-auto\">\n              <h3>JS Functions</h3>\n                <AceEditor\n                  fontSize={14}\n                  mode=\"javascript\"\n                  theme=\"dracula\"\n                  value={functions}\n                  onChange={(e) => setFunctions(e)}\n                  name=\"functions\"\n                  editorProps={{$blockScrolling: true}}\n                  showPrintMargin={false}\n                  width=\"auto\"\n                />\n              </div>\n            )}\n            <div className=\"width-auto\">\n              <h3>Input({`.${inputType}`})</h3>\n              <AceEditor\n                fontSize={14}\n                mode={inputType}\n                theme=\"dracula\"\n                value={input}\n                onChange={(e) => setInput(e)}\n                name=\"input\"\n                width=\"auto\"\n                editorProps={{$blockScrolling: true}}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={!showFunctions ? {gridColumn: \"1 / 3\"}: {}}>\n              <h3>Output</h3>\n              <AceEditor\n                fontSize={14}\n                mode={outputType}\n                theme=\"dracula\"\n                value={output}\n                name=\"output\"\n                editorProps={{$blockScrolling: true}}\n                width=\"auto\"\n                readOnly={true}\n                showPrintMargin={false}\n              />\n            </div>\n            <div className=\"width-auto\" style={{gridColumn: \"1 / 3\"}}>\n              <h3>Settings</h3>\n              <span className=\"marginRight\">\n                RML type:\n                <select value={rmlType} onChange={(e) => setRmlType(e.target.value)}>\n                  <option value=\"yaml\">Yarrrml</option>\n                  <option value=\"turtle\">RML-turtle</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Input type:\n                <select value={inputType} onChange={(e) => setInputType(e.target.value)}>\n                  <option value=\"json\">JSON</option>\n                  <option value=\"xml\">XML</option>\n                  <option value=\"text\">CSV</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                Output type:\n                <select value={outputType} onChange={(e) => setOutputType(e.target.value)}>\n                  <option value=\"json\">JSON-LD</option>\n                  <option value=\"turtle\">N-Tripples</option>\n                </select>\n              </span>\n              <span className=\"marginRight\">\n                <input type=\"checkbox\" name=\"runMapperOnChange\" checked={showFunctions} onChange={(e) => setShowFunctions(!showFunctions)}/> Show functions\n              </span>\n              <input type=\"checkbox\" name=\"runMapperOnChange\" checked={runOnChange} onChange={(e) => setRunOnChange(!runOnChange)}/> Run mapper on change\n              <br/>\n              <button className=\"button small\" onClick={saveRML}>Download RML</button>\n            </div>\n          </div>\n          <div className=\"footer\"/>\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","\nexport const downloadString = (text: string, fileType: string, fileName: string) => {\n    const blob = new Blob([text], { type: fileType });\n  \n    const a = document.createElement('a');\n    a.download = fileName;\n    a.href = URL.createObjectURL(blob);\n    a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}